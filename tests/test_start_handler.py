from datetime import datetime
from unittest.mock import AsyncMock, patch

import pytest

from handlers.handlers import start_handler
from handlers.keyboards import get_request_keyboard, get_initial_keyboard


@pytest.mark.asyncio
async def test_start_handler_user_without_location():
    mock_client = AsyncMock()
    mock_message = AsyncMock()
    mock_message.from_user.id = 12345
    mock_message.from_user.first_name = "–ñ–µ–Ω—è"

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º mock –¥–ª—è reply_text
    mock_message.reply_text.return_value = AsyncMock(id=42)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º id –∫–∞–∫ —á–∏—Å–ª–æ

    # –ó–∞–º–æ–∫–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    with patch("handlers.handlers.add_new_user") as mock_add_new_user, \
         patch("handlers.handlers.get_has_provided_location", return_value=None) as mock_get_has_location, \
         patch("handlers.handlers.get_user_time_zone_db", return_value={"time_zone": None}) as mock_get_time_zone_db, \
         patch("handlers.handlers.get_user_time_zone", return_value="UTC") as mock_get_user_time_zone, \
         patch("handlers.handlers.get_local_time", return_value=datetime(2024, 11, 10, 10, 0, 0)) as mock_get_local_time, \
         patch("handlers.handlers.logger") as mock_logger:

        # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
        msg_id = await start_handler(mock_client, mock_message)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤—ã —Ñ—É–Ω–∫—Ü–∏–π
        mock_add_new_user.assert_called_once_with(mock_message.from_user)
        mock_get_has_location.assert_called_once_with(12345)
        mock_get_time_zone_db.assert_called_once_with(12345)
        mock_get_user_time_zone.assert_called_once_with(12345)
        mock_get_local_time.assert_called_once()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–ø—Ä–æ—Å–æ–º –ª–æ–∫–∞—Ü–∏–∏
        mock_message.reply_text.assert_any_call(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.",
            reply_markup=get_request_keyboard('location_only')
        )

        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ msg_id –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è
        assert isinstance(msg_id, int)
        assert msg_id == 42

@pytest.mark.asyncio
async def test_start_handler_user_with_location():
    mock_client = AsyncMock()
    mock_message = AsyncMock()
    mock_message.from_user.id = 12345
    mock_message.from_user.first_name = "–ñ–µ–Ω—è"

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º mock –¥–ª—è reply_text
    mock_message.reply_text.return_value = AsyncMock(id=42)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º id –∫–∞–∫ —á–∏—Å–ª–æ

    # –ó–∞–º–æ–∫–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    with patch("handlers.handlers.add_new_user") as mock_add_new_user, \
         patch("handlers.handlers.get_has_provided_location", return_value={"has_provided_location": True}) as mock_get_has_location, \
         patch("handlers.handlers.get_user_time_zone_db", return_value={"time_zone": "UTC"}) as mock_get_time_zone_db, \
         patch("handlers.handlers.get_local_time", return_value=datetime(2024, 11, 10, 10, 0, 0)) as mock_get_local_time, \
         patch("handlers.handlers.logger") as mock_logger:

        # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
        msg_id = await start_handler(mock_client, mock_message)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤—ã —Ñ—É–Ω–∫—Ü–∏–π
        mock_add_new_user.assert_called_once_with(mock_message.from_user)
        mock_get_has_location.assert_called_once_with(12345)
        mock_get_time_zone_db.assert_called_once_with(12345)
        mock_get_local_time.assert_called_once()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        mock_message.reply_text.assert_any_call(
            "–ü—Ä–∏–≤–µ—Ç, –ñ–µ–Ω—è!\n–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ UTC –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è 2024-11-10 10:00:00."
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤—ã–±–æ—Ä–æ–º –¥–µ–π—Å—Ç–≤–∏—è
        mock_message.reply_text.assert_any_call(
            "–í—ã —É–∂–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏ —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é.\n\nüëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–Ω–∞.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
            reply_markup=get_initial_keyboard()
        )

        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ msg_id –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è
        assert isinstance(msg_id, int)
        assert msg_id == 42
from __future__ import annotations

import csv
import json
# import logging
import logging.config
import os
import random
import re
from enum import Enum, auto
from uuid import uuid4

from pyrogram import Client, filters
from pyrogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, User, CallbackQuery, ReplyKeyboardRemove
from pyrogram.types import ForceReply
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InlineQueryResultArticle, InputTextMessageContent
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
import sqlite3
from datetime import datetime, time, timedelta

from config import TELEGRAM_API_ID, TELEGRAM_API_HASH, TELEGRAM_BOT_TOKEN
from location_detect import get_city_from_coordinates
from modify_tables import execute_query, database_initialize, create_trigers_db, save_user_city

import matplotlib.pyplot as plt
import io

from wether_tips import get_sleep_advice_based_on_weather, get_weather

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# logging.basicConfig(
#     level=logging.INFO,  # –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (DEBUG, INFO, WARNING, ERROR, CRITICAL)
#     format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
#     handlers=[
#         logging.FileHandler("bot.log"),  # –ó–∞–ø–∏—Å—å –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª bot.log
#         logging.StreamHandler()  # –í—ã–≤–æ–¥ –ª–æ–≥–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å
#     ]
# )

with open('logging.json', 'r') as f:
    config = json.load(f)
    logging.config.dictConfig(config)

logger = logging.getLogger('bot')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
# API_ID = int(os.environ.get("API_ID"))
# API_HASH = os.environ.get("API_HASH")
# BOT_TOKEN = os.environ.get("BOT_TOKEN")

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∞ –±–æ—Ç–∞
app = Client("sleep_tracker_bot",
             api_id=TELEGRAM_API_ID,
             api_hash=TELEGRAM_API_HASH,
             bot_token=TELEGRAM_BOT_TOKEN)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
try:
    database_initialize()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
except sqlite3.OperationalError as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–∑–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞ update_existing_sleep_time
try:
    create_trigers_db()
    logger.info("–¢—Ä–∏–≥–≥–µ—Ä update_existing_sleep_time —Å–æ–∑–¥–∞–Ω")
except sqlite3.OperationalError as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–∏–≥–≥–µ—Ä–∞: {e}")

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states: dict[int, "UserStates"] = {}


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class UserStates(Enum):
    STATE_NONE = auto()
    STATE_WAITING_REMINDER_TIME = auto()
    STATE_WAITING_SLEEP_QUALITY = auto()
    STATE_WAITING_SLEEP_GOAL = auto()
    STATE_WAITING_WAKE_TIME = auto()
    STATE_WAITING_SAVE_MOOD = auto()
    STATE_WAITING_CONFIRM_DELETE = auto()
    STATE_WAITING_LOCATION = auto()


async def user_state_navigate(state: UserStates, client: Client, message: Message, user: User = None):
    if user is None:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    try:
        is_valid_user(user)
    except Exception as e:
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º: {e}")
    user_id = user.id

    if state == UserStates.STATE_WAITING_REMINDER_TIME:
        await save_reminder_time(client, message, user)
    elif state == UserStates.STATE_WAITING_SLEEP_QUALITY:
        await save_sleep_quality(client, message, user)
    elif state == UserStates.STATE_WAITING_SLEEP_GOAL:
        logger.info(__name__ + str(state))
        await save_sleep_goal(client, message, user)
    elif state == UserStates.STATE_WAITING_SAVE_MOOD:
        await save_mood(client, message, user)
    elif state == UserStates.STATE_WAITING_CONFIRM_DELETE:
        await confirm_delete(client, message, user)
    else:
        await message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
                           reply_markup=get_back_keyboard())
        user_states[user_id] = UserStates.STATE_NONE
    await message.delete()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    keyboard = ReplyKeyboardMarkup(
        [
            [KeyboardButton("üò¥ –°–æ–Ω"), KeyboardButton("üåÖ –ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ")],
            [KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")],
            [KeyboardButton("üîï –£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"), KeyboardButton("üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")],
            [KeyboardButton("üìà –ì—Ä–∞—Ñ–∏–∫ —Å–Ω–∞"), KeyboardButton("üí° –°–æ–≤–µ—Ç –ø–æ —Å–Ω—É")],
            [KeyboardButton("‚≠êÔ∏è –û—Ü–µ–Ω–∫–∞ —Å–Ω–∞"), KeyboardButton("üéØ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–∏ —Å–Ω–∞")],
            [KeyboardButton("ü•≥ –í–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ"), KeyboardButton("üóÉ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")],
            [KeyboardButton("‚öôÔ∏è –ú–µ–Ω—é")]
        ],
        resize_keyboard=True
    )
    return keyboard


def get_initial_keyboard():
    keyboard = ReplyKeyboardMarkup(
        [
            [KeyboardButton("‚öôÔ∏è –ú–µ–Ω—é"), KeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")]
        ],
        resize_keyboard=True
    )
    return keyboard


def get_back_keyboard():
    keyboard = ReplyKeyboardMarkup(
        [
            [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )
    return keyboard


def is_valid_user(user: User):
    if not isinstance(user, User):
        raise TypeError
    if (
            user.is_bot or user.is_fake or
            user.is_deleted or user.is_contact or
            user.is_restricted or user.is_scam
    ):
        raise ValueError
    return True


def add_user_to_db(user: User):
    if user is None:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    try:
        is_valid_user(user)
    except Exception as e:
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º: {e}")
    user_id = user.id
    username = user.username
    first_name = user.first_name
    last_name = user.last_name

    query = '''
            INSERT INTO users (id, username, first_name, last_name)
            VALUES (:id, :username, :first_name, :last_name)
            ON CONFLICT(id) DO UPDATE SET
                username = :username,
                first_name = :first_name,
                last_name = :last_name
        '''

    params = {
        'id': user_id,
        'username': username,
        'first_name': first_name,
        'last_name': last_name
    }

    try:
        # –í—Å—Ç–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ —Ç–∞–±–ª–∏—Ü—É users
        execute_query(query, params)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ users")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")


def get_user_stats(user_id: int):
    query = '''
        SELECT sleep_time, wake_time FROM sleep_records
        WHERE user_id = :user_id
        ORDER BY sleep_time DESC
    '''
    params = {"user_id": user_id}

    try:
        record = execute_query(query, params).fetchone()
        if record:
            sleep_time = datetime.fromisoformat(record['sleep_time'])
            wake_time = record['wake_time']
            if wake_time:
                wake_time = datetime.fromisoformat(wake_time)
                duration = wake_time - sleep_time
                response = f"üõå –í–∞—à–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å —Å–Ω–∞:\n–° {sleep_time.strftime('%Y-%m-%d %H:%M')} –¥–æ {wake_time.strftime('%Y-%m-%d %H:%M')} ‚Äî {duration}"
            else:
                response = f"üõå –í–∞—à–∞ —Ç–µ–∫—É—â–∞—è –∑–∞–ø–∏—Å—å —Å–Ω–∞:\n–° {sleep_time.strftime('%Y-%m-%d %H:%M')} ‚Äî –ï—â—ë –Ω–µ –ø—Ä–æ—Å–Ω—É–ª–∏—Å—å"
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–Ω–∞")
            return response
        else:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–Ω–∞, –Ω–æ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π")
            return
    except sqlite3.OperationalError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return


# –ö–æ–º–∞–Ω–¥–∞ /start
@app.on_message(filters.command("start"))
async def start(client: Client, message: Message):
    user = message.from_user
    try:
        add_user_to_db(user)
    finally:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π

        # result = execute_query("SELECT has_provided_location FROM users WHERE user_id = ? AND "
        #                        "has_provided_location = 0",
        #                        (user.id,)).fetchone()
        #
        # if result is None or not result[0]:
        #     await request_location(client, message)
        # else:
        #     await message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã —É–∂–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏ —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é.")
        await message.reply_text(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–Ω–∞.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
            reply_markup=get_initial_keyboard()
        )


# –ö–æ–º–∞–Ω–¥–∞ /set_reminder
@app.on_message(filters.command("set_reminder"))
async def set_reminder(client: Client, message: Message, user: User = None):
    if user is None:
        user = message.from_user
    try:
        is_valid_user(user)
    except Exception as e:
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º: {e}")
    user_id = user.id
    user_states[user_id] = UserStates.STATE_WAITING_REMINDER_TIME
    await message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ "
        "–æ —Å–Ω–µ, –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (24-—á–∞—Å–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç).\n–ù–∞–ø—Ä–∏–º–µ—Ä: 22:30",
        reply_markup=ForceReply()
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å –≤—Ä–µ–º–µ–Ω–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def save_reminder_time(client: Client, message: Message, user: User = None):
    if message.reply_to_message:
        if user is None:
            user = message.from_user
        try:
            is_valid_user(user)
        except Exception as e:
            logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º: {e}")
        add_user_to_db(user)
        user_id = user.id
        reminder_time_str = message.text.strip()
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
        if not re.match(r'^\d{1,2}:\d{2}$', reminder_time_str):
            await message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM.",
                reply_markup=ForceReply()
            )
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: {reminder_time_str}")
            return

        query = '''
                INSERT OR REPLACE INTO reminders (user_id, reminder_time)
                VALUES (:user_id, :reminder_time)
            '''
        params = {'user_id': user_id, 'reminder_time': reminder_time_str}

        try:
            reminder_time = datetime.strptime(reminder_time_str, "%H:%M").time()
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            execute_query(query, params)
            user_states[user_id] = UserStates.STATE_NONE
            await message.reply_text(
                f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {reminder_time_str}.",
                reply_markup=get_initial_keyboard()
            )
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å—Ç–∞–Ω–æ–≤–∏–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ {reminder_time_str}")
        except ValueError:
            await message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Ä–µ–º—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.",
                reply_markup=ForceReply()
            )
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è: {reminder_time_str}")
        except Exception as e:
            await message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É",
                reply_markup=ForceReply()
            )
            logger.critical(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –≤—Ä–µ–º–µ–Ω–∏: {e}")


# –ö–æ–º–∞–Ω–¥–∞ /rate_sleep
@app.on_message(filters.command("rate_sleep"))
async def rate_sleep(client: Client, message: Message, user: User = None):
    if user is None:
        user = message.from_user
    try:
        is_valid_user(user)
    except Exception as e:
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º: {e}")
    user_id = user.id
    user_states[user_id] = UserStates.STATE_WAITING_SLEEP_QUALITY
    await message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤–∞—à–µ–≥–æ —Å–Ω–∞ –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 5.",
        reply_markup=ForceReply()
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å –æ—Ü–µ–Ω–∫–æ–π —Å–Ω–∞
async def save_sleep_quality(client: Client, message: Message, user: User = None):
    if message.reply_to_message or message.text:
        if user is None:
            user = message.from_user
        try:
            is_valid_user(user)
        except Exception as e:
            logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º: {e}")
        user_id = user.id
        quality = int(message.text.strip())
        query = '''
            UPDATE sleep_records
            SET sleep_quality = :quality
            WHERE sleep_time IN (
                SELECT sleep_time FROM sleep_records 
                WHERE user_id = :user_id AND wake_time IS NOT NULL
                ORDER BY sleep_time DESC 
                LIMIT 1
            );
        '''
        params = {'quality': quality, 'user_id': user_id}
        try:
            if 1 <= quality <= 5:
                execute_query(query, params)
                user_states[user_id] = UserStates.STATE_NONE
                await message.reply_text(
                    "–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.",
                    reply_markup=get_initial_keyboard()
                )
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ü–µ–Ω–∏–ª —Å–æ–Ω –Ω–∞ {quality}")
            else:
                await message.reply_text(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5.",
                    reply_markup=ForceReply()
                )
                logger.warning(f"–ü–æ–ª—å–∑–æ–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª —á–∏—Å–ª–æ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—â–µ–µ –¥–∏–∞–ø–∞–∑–æ–Ω—É. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É")
        except ValueError:
            await message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5.",
                reply_markup=ForceReply()
            )
            logger.error(f"–ü–æ–ª—å–∑–æ–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –Ω–µ–≤–µ—Ä–Ω–æ —á–∏—Å–ª–æ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É")
        except Exception as e:
            await message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ —Å–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É",
                reply_markup=ForceReply()
            )
            logger.critical(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ —Å–Ω–∞: {e}")


# –ö–æ–º–∞–Ω–¥–∞ /set_sleep_goal
@app.on_message(filters.command("set_sleep_goal"))
async def set_sleep_goal(client: Client, message: Message, user: User = None):
    if user is None:
        user = message.from_user
    try:
        is_valid_user(user)
    except Exception as e:
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º: {e}")
    user_id = user.id
    user_states[user_id] = UserStates.STATE_WAITING_SLEEP_GOAL
    await message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å –ø–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–Ω–∞ –≤ —á–∞—Å–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 7.5).",
        reply_markup=ForceReply()
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å —Ü–µ–ª—å—é —Å–Ω–∞
async def save_sleep_goal(client: Client, message: Message, user: User = None):
    if message.reply_to_message or message.text:
        if user is None:
            user = message.from_user
        try:
            is_valid_user(user)
        except Exception as e:
            logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º: {e}")
        add_user_to_db(user)
        user_id = user.id
        goal = float(message.text.strip())
        query = '''
            UPDATE users
            SET sleep_goal = :goal
            WHERE id = :user_id
        '''
        params = {'goal': goal, 'user_id': user_id}
        try:
            if 0 < goal <= 24:
                execute_query(query, params)
                user_states[user_id] = UserStates.STATE_NONE
                await message.reply_text(
                    f"–í–∞—à–∞ —Ü–µ–ª—å –ø–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {goal} —á–∞—Å–æ–≤.",
                    reply_markup=get_initial_keyboard()
                )
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å—Ç–∞–Ω–æ–≤–∏–ª —Ü–µ–ª—å —Å–Ω–∞: {goal} —á–∞—Å–æ–≤")
            else:
                await message.reply_text(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 24.",
                    reply_markup=ForceReply()
                )
        except ValueError:
            await message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.",
                reply_markup=ForceReply()
            )
        except Exception as e:
            await message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–ª–∏ —Å–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É",
                reply_markup=ForceReply()
            )
            logger.critical(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ü–µ–ª–∏ —Å–Ω–∞: {e}")


@app.on_message(filters.command("set_wake_time"))
async def set_wake_time(client: Client, message: Message, user: User = None):
    if user is None:
        user = message.from_user
    try:
        is_valid_user(user)
    except Exception as e:
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º: {e}")
    user_id = user.id
    user_states[user_id] = UserStates.STATE_WAITING_WAKE_TIME
    await message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø—Ä–æ—Å–Ω—É—Ç—Å—è "
        "–≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (24 —á–∞—Å–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç). \n–ù–∞–ø—Ä–∏–º–µ—Ä: 7:45",
        reply_markup=ForceReply()
    )


async def save_wake_time(client: Client, message: Message, user: User = None):
    if message.reply_to_message or message.text:
        if user is None:
            user = message.from_user
        try:
            is_valid_user(user)
        except Exception as e:
            logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º: {e}")
        add_user_to_db(user)
        user_id = user.id
        wake_time_str = message.text.strip()
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
        if not re.match(r'^\d{1,2}:\d{2}$', wake_time_str):
            await message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM.",
                reply_markup=ForceReply()
            )
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: {wake_time_str}")
            return
        query = '''
           UPDATE users 
           SET wake_time = :wake_time
           WHERE id = :user_id
       '''
        params = {'user_id': user_id, 'wake_time': wake_time_str}

        try:
            wake_time = datetime.strptime(wake_time_str, "%H:%M").time()
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            execute_query(query, params)
            user_states[user_id] = UserStates.STATE_NONE
            await message.reply_text(
                f"‚è∞ –í—Ä–µ–º—è –ø–æ–¥—ä–µ–º–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {wake_time_str}.",
                reply_markup=get_initial_keyboard()
            )
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å—Ç–∞–Ω–æ–≤–∏–ª –≤—Ä–µ–º—è –ø–æ–¥—ä–µ–º–∞ –Ω–∞ {wake_time_str}")
        except ValueError:
            await message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Ä–µ–º—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.",
                reply_markup=ForceReply()
            )
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è: {wake_time_str}")
        except Exception as e:
            await message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É",
                reply_markup=ForceReply()
            )
            logger.critical(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–¥—ä–µ–º–∞: {e}")



# –ö–æ–º–∞–Ω–¥–∞ /log_mood
@app.on_message(filters.command("log_mood"))
async def log_mood(client: Client, message: Message, user: User = None):
    if user is None:
        user = message.from_user
    try:
        is_valid_user(user)
    except Exception as e:
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º: {e}")
    user_id = user.id
    user_states[user_id] = UserStates.STATE_WAITING_SAVE_MOOD
    await message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –≤–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 (–ø–ª–æ—Ö–æ–µ) –¥–æ 5 (–æ—Ç–ª–∏—á–Ω–æ–µ).",
        reply_markup=ForceReply()
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º
async def save_mood(client: Client, message: Message, user: User = None):
    if message.reply_to_message or message.text:
        if user is None:
            user = message.from_user
        try:
            is_valid_user(user)
        except Exception as e:
            logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º: {e}")
        user_id = user.id
        mood = int(message.text.strip())
        query = '''
            UPDATE sleep_records
            SET mood = :mood
            WHERE sleep_time IN (
                SELECT sleep_time FROM sleep_records 
                WHERE user_id = :user_id AND wake_time IS NOT NULL
                ORDER BY sleep_time DESC 
                LIMIT 1
            );
        '''
        params = {'mood': mood, 'user_id': user_id}
        try:
            if 1 <= mood <= 5:
                execute_query(query, params)
                user_states[user_id] = UserStates.STATE_NONE
                await message.reply_text(
                    "–°–ø–∞—Å–∏–±–æ! –í–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.",
                    reply_markup=get_initial_keyboard()
                )
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø–∏—Å–∞–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {mood}")
            else:
                await message.reply_text(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5.",
                    reply_markup=ForceReply()
                )
        except ValueError:
            await message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5.",
                reply_markup=ForceReply()
            )
        except Exception as e:
            await message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É",
                reply_markup=ForceReply()
            )
            logger.critical(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è: {e}")


# –ö–æ–º–∞–Ω–¥–∞ /delete_my_data
@app.on_message(filters.command("delete_my_data"))
async def delete_my_data(client: Client, message: Message, user: User = None):
    if user is None:
        user = message.from_user
    try:
        is_valid_user(user)
    except Exception as e:
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º: {e}")
    user_id = user.id
    user_states[user_id] = UserStates.STATE_WAITING_CONFIRM_DELETE
    await message.reply_text(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ. –ù–∞–ø–∏—à–∏—Ç–µ '–î–∞' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
        reply_markup=ForceReply()
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
async def confirm_delete(client: Client, message: Message, user: User = None):
    if message.reply_to_message or message.text:
        if user is None:
            user = message.from_user
        try:
            is_valid_user(user)
        except Exception as e:
            logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º: {e}")
        user_id = user.id
        queries = [
            'DELETE FROM sleep_records WHERE user_id = :user_id',
            'DELETE FROM reminders WHERE user_id = :user_id',
            'DELETE FROM users WHERE id = :user_id'
        ]
        params = {'user_id': user_id}
        if message.text.strip().lower() == '–¥–∞':
            try:
                for query in queries:
                    execute_query(query, params)
                user_states[user_id] = UserStates.STATE_NONE
                await message.reply_text(
                    "–í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã.",
                    reply_markup=get_initial_keyboard()
                )
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–∏–ª –≤—Å–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                await message.reply_text(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö.",
                    reply_markup=ForceReply()
                )
        else:
            await message.reply_text(
                "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                reply_markup=get_initial_keyboard()
            )


# –ö–æ–º–∞–Ω–¥–∞ /sleep
@app.on_message(filters.command("sleep"))
async def sleep_time(client: Client, message: Message, user: User = None):
    if user is None:
        user = message.from_user
    try:
        is_valid_user(user)
    except Exception as e:
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º: {e}")
    add_user_to_db(user)
    user_id = user.id
    sleep_time = datetime.now()
    query = '''
        INSERT INTO sleep_records (user_id, sleep_time)
        VALUES (:user_id, :sleep_time)
    '''
    params = {'user_id': user_id, 'sleep_time': sleep_time.isoformat()}
    try:

        select_query = execute_query('''
            SELECT user_id FROM sleep_records
            WHERE user_id = :user_id
            AND wake_time IS NULL
        ''', {'user_id': user_id})

        if len(select_query.fetchall()) > 0:
            await message.reply_text(
                "‚ùóÔ∏è –ó–∞–ø–∏—Å—å –æ –≤—Ä–µ–º–µ–Ω–∏ —Å–Ω–∞ —É–∂–µ –æ—Ç–º–µ—á–µ–Ω–∞. "
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /wake, –¥–ª—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è.",
                reply_markup=get_initial_keyboard()
            )
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–ø–∏—Å—å —Å–Ω–∞ –±–µ–∑ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è.")
            return

        execute_query(query, params)
        await message.reply_text(
            f"üåô –í—Ä–µ–º—è –æ—Ç—Ö–æ–¥–∞ –∫–æ —Å–Ω—É –æ—Ç–º–µ—á–µ–Ω–æ: {sleep_time.strftime('%Y-%m-%d %H:%M:%S')}",
            reply_markup=get_initial_keyboard()
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ—Ç–∏–ª –≤—Ä–µ–º—è —Å–Ω–∞: {sleep_time}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å–Ω–∞.",
            reply_markup=get_initial_keyboard()
        )


# –ö–æ–º–∞–Ω–¥–∞ /wake
@app.on_message(filters.command("wake"))
async def wake_time(client: Client, message: Message, user: User = None):
    if user is None:
        user = message.from_user
    try:
        is_valid_user(user)
    except Exception as e:
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º: {e}")
    user_id = user.id
    wake_time = datetime.now()
    query = '''
        UPDATE sleep_records
        SET wake_time = :wake_time
        WHERE user_id = :user_id AND wake_time IS NULL
    '''
    params = {'wake_time': wake_time.isoformat(), 'user_id': user_id}
    try:

        if execute_query(query, params).rowcount == 0:
            await message.reply_text(
                "‚ùóÔ∏è –ù–µ—Ç –∑–∞–ø–∏—Å–∏ –æ –≤—Ä–µ–º–µ–Ω–∏ —Å–Ω–∞ –∏–ª–∏ —É–∂–µ –æ—Ç–º–µ—á–µ–Ω–æ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ. "
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /sleep, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å.",
                reply_markup=get_initial_keyboard()
            )
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –æ—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–ø–∏—Å–∏ —Å–Ω–∞.")
            return
        await message.reply_text(
            f"‚òÄÔ∏è –í—Ä–µ–º—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è –æ—Ç–º–µ—á–µ–Ω–æ: {wake_time.strftime('%Y-%m-%d %H:%M:%S')}",
            reply_markup=get_initial_keyboard()
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ—Ç–∏–ª –≤—Ä–µ–º—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è: {wake_time}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è.",
            reply_markup=get_initial_keyboard()
        )


# –ö–æ–º–∞–Ω–¥–∞ /stats
@app.on_message(filters.command("stats"))
async def sleep_stats(client: Client, message: Message, user: User = None):
    if user is None:
        user = message.from_user
    try:
        is_valid_user(user)
    except Exception as e:
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º: {e}")
    user_id = user.id
    try:
        response = get_user_stats(user_id)
        if response:
            await message.reply_text(
                response,
                reply_markup=get_initial_keyboard()
            )
        else:
            await message.reply_text(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ —Å–Ω–µ.",
                reply_markup=get_initial_keyboard()
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏ get_user_stats: {e}")
        await message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–Ω–∞.",
            reply_markup=get_initial_keyboard()
        )


# –ö–æ–º–∞–Ω–¥–∞ /remove_reminder
@app.on_message(filters.command("remove_reminder"))
async def remove_reminder(client: Client, message: Message, user: User = None):
    if user is None:
        user = message.from_user
    try:
        is_valid_user(user)
    except Exception as e:
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º: {e}")
    user_id = user.id
    query = 'DELETE FROM reminders WHERE user_id = :user_id'
    params = {'user_id': user_id}
    try:
        execute_query(query, params)
        await message.reply_text(
            "üîï –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.",
            reply_markup=get_initial_keyboard()
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–∏–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.",
            reply_markup=get_initial_keyboard()
        )


# –ö–æ–º–∞–Ω–¥–∞ /get_phone
@app.on_message(filters.command("get_phone"))
async def request_contact(client: Client, message: Message):
    contact_button = KeyboardButton(
        text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
        request_contact=True
    )
    return_button = KeyboardButton("‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è")
    reply_markup = ReplyKeyboardMarkup(
        [[return_button, contact_button]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        reply_markup=reply_markup
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
@app.on_message(filters.contact)
async def save_contact(client: Client, message: Message, user: User = None):
    if user is None:
        user = message.from_user
    try:
        is_valid_user(user)
    except Exception as e:
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º: {e}")
    add_user_to_db(user)
    user_id = user.id
    contact = message.contact
    phone_number = contact.phone_number
    contact_user_id = contact.user_id  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–Ω—Ç–∞–∫—Ç

    query = '''
        UPDATE users
        SET phone_number = :phone_number
        WHERE id = :id
    '''
    params = {'phone_number': phone_number, 'id': user_id}

    if contact_user_id == user_id:
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        try:
            execute_query(query, params)
            await message.reply_text(
                "üìû –°–ø–∞—Å–∏–±–æ! –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.",
                reply_markup=get_initial_keyboard()
            )
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥–µ–ª–∏–ª—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            await message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
                reply_markup=get_initial_keyboard()
            )
    else:
        await message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç.",
            reply_markup=get_initial_keyboard()
        )
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á—É–∂–æ–π –∫–æ–Ω—Ç–∞–∫—Ç.")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ª–æ–∫–∞—Ü–∏–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@app.on_message(filters.command("send_location"))
async def request_location(client: Client, message: Message):
    location_button = KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)
    reply_markup = ReplyKeyboardMarkup([[KeyboardButton('‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è'), location_button]],
                                       resize_keyboard=True, one_time_keyboard=True)
    await message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º, —á—Ç–æ–±—ã —è –º–æ–≥ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à –≥–æ—Ä–æ–¥.",
                             reply_markup=reply_markup)


@app.on_message(filters.location)
async def handle_location(client: Client, message: Message):
    latitude = message.location.latitude
    longitude = message.location.longitude

    city_name = get_city_from_coordinates(latitude, longitude)
    if city_name:
        user_id = message.from_user.id
        save_user_city(user_id, city_name)
        await message.reply_text(f"–í–∞—à –≥–æ—Ä–æ–¥: {city_name}. –°–ø–∞—Å–∏–±–æ!", reply_markup=get_initial_keyboard())
    else:
        await message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à –≥–æ—Ä–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                                 reply_markup=request_location())
    await message.delete()


@app.on_message(filters.command("weather_advice"))
async def weather_advice(client: Client, message: Message, user: User = None):
    if user is None:
        user = message.from_user
    try:
        is_valid_user(user)
    except Exception as e:
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º: {e}")
    add_user_to_db(user)
    user_id = user.id

    try:
        user_city_name_record = execute_query('SELECT city_name FROM users WHERE id = :user_id',
                                              {"user_id": user_id}).fetchone()
        if user_city_name_record:
            user_city = user_city_name_record["city_name"]
        else:
            user_city = "Moscow" # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–æ—Ä–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –µ–≥–æ

        weather = get_weather(user_city)

        if weather:
            advice = get_sleep_advice_based_on_weather(weather)
            response = (
                f"–ü–æ–≥–æ–¥–∞ –≤ {weather['city']}:\n"
                f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather['temperature']}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {weather['feels_like']}¬∞C)\n"
                f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather['humidity']}%\n"
                f"–ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è: {weather['weather_description']}\n"
                f"–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {weather['wind_speed']} –º/—Å\n\n"
                f"–°–æ–≤–µ—Ç—ã –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Å–Ω–∞:\n{advice}"
            )
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç –ø–æ —Å–Ω—É", callback_data="sleep_tips")]
            ])
        else:
            response = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            keyboard = ReplyKeyboardMarkup([[KeyboardButton("üîô –ù–∞–∑–∞–¥")]])

        await message.reply_text(response, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∏–º–µ–Ω–∏ –≥–æ—Ä–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö –æ –≥–æ—Ä–æ–¥–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑",
                                 reply_markup=request_location(client, message))


# –ö–æ–º–∞–Ω–¥–∞ /sleep_chart
@app.on_message(filters.command("sleep_chart"))
async def sleep_chart(client: Client, message: Message, user: User = None):
    if user is None:
        user = message.from_user
    try:
        is_valid_user(user)
    except Exception as e:
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º: {e}")
    user_id = user.id
    query = '''
        SELECT sleep_time, wake_time FROM sleep_records
        WHERE user_id = :user_id AND wake_time IS NOT NULL
        ORDER BY sleep_time DESC LIMIT 7
    '''
    params = {'user_id': user_id}
    try:
        records = execute_query(query, params).fetchall()
        if records:
            durations = []
            dates = []
            for record in records:
                sleep_time = datetime.fromisoformat(record['sleep_time'])
                wake_time = datetime.fromisoformat(record['wake_time'])
                duration = (wake_time - sleep_time).total_seconds() / 3600  # –í —á–∞—Å–∞—Ö
                durations.append(duration)
                dates.append(sleep_time.date())
            # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
            plt.figure(figsize=(10, 5))
            plt.plot(dates, durations, marker='o')
            plt.xlabel('–î–∞—Ç–∞')
            plt.ylabel('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞ (—á–∞—Å—ã)')
            plt.title('–í–∞—à —Å–æ–Ω –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π')
            plt.grid(True)
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –≤ –±—É—Ñ–µ—Ä
            buf = io.BytesIO()
            plt.savefig(buf, format='png')
            buf.seek(0)
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await client.send_photo(chat_id=user_id, photo=buf, caption='–í–∞—à –≥—Ä–∞—Ñ–∏–∫ —Å–Ω–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π.',
                                    reply_markup=get_initial_keyboard())
            plt.close()
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –≥—Ä–∞—Ñ–∏–∫ —Å–Ω–∞")
        else:
            await message.reply_text(
                "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.",
                reply_markup=get_initial_keyboard()
            )
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –≥—Ä–∞—Ñ–∏–∫ —Å–Ω–∞, –Ω–æ –∑–∞–ø–∏—Å–µ–π –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞.",
            reply_markup=get_initial_keyboard()
        )


# –ö–æ–º–∞–Ω–¥–∞ /sleep_tips
@app.on_message(filters.command("sleep_tips"))
async def sleep_tips(client: Client, message: Message, user: User = None):
    if user is None:
        user = message.from_user
    try:
        is_valid_user(user)
    except Exception as e:
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º: {e}")
    user_id = user.id
    sleep_tips = []
    with open("sleep_tips.txt", 'r') as st:
        while line := st.readline():
            sleep_tips.append(line)

    tip = random.choice(sleep_tips)
    await message.reply_text(
        f"üí° –°–æ–≤–µ—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å–Ω–∞:\n\n{tip}",
        reply_markup=get_initial_keyboard()
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–æ–≤–µ—Ç –ø–æ —Å–Ω—É")


# –ö–æ–º–∞–Ω–¥–∞ /export_data
@app.on_message(filters.command("export_data"))
async def export_data(client: Client, message: Message, user: User = None):
    if user is None:
        user = message.from_user
    try:
        is_valid_user(user)
    except Exception as e:
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º: {e}")
    user_id = user.id
    query = '''
        SELECT * FROM sleep_records
        WHERE user_id = :user_id
    '''
    params = {'user_id': user_id}
    try:
        records = execute_query(query, params).fetchall()
        if records:
            # –°–æ–∑–¥–∞–Ω–∏–µ CSV —Ñ–∞–π–ª–∞
            fieldnames = records[0].keys()
            with open(f'sleep_data_{user_id}.csv', 'w', newline='') as csvfile:
                writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
                writer.writeheader()
                writer.writerows([dict(record) for record in records])
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await client.send_document(chat_id=user_id, document=f'sleep_data_{user_id}.csv')
            os.remove(f'sleep_data_{user_id}.csv')  # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            await message.reply_text(
                "–î–∞–Ω–Ω—ã–µ –æ —Å–Ω–µ –ø–æ–ª—É—á–µ–Ω—ã.",
                reply_markup=get_initial_keyboard()
            )
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ")
        else:
            await message.reply_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.",
                reply_markup=get_initial_keyboard()
            )
    except sqlite3.OperationalError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
            reply_markup=get_initial_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö.",
            reply_markup=get_initial_keyboard()
        )


# –ö–æ–º–∞–Ω–¥–∞ /menu
@app.on_message(filters.command("menu"))
async def send_main_menu(client: Client, chat_id: int):
    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üò¥ –°–æ–Ω", callback_data="sleep"),
            InlineKeyboardButton("üåÖ –ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ", callback_data="wake")
        ],
        [
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
            InlineKeyboardButton("üìà –ì—Ä–∞—Ñ–∏–∫ —Å–Ω–∞", callback_data="sleep_chart")
        ],
        [
            InlineKeyboardButton("üéØ –¶–µ–ª–∏ —Å–Ω–∞", callback_data="sleep_goals"),
            InlineKeyboardButton("üí§ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ —Å–Ω–∞", callback_data="sleep_characteristics")
        ],
        [
            InlineKeyboardButton("‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="reminders"),
            InlineKeyboardButton("üí° –°–æ–≤–µ—Ç—ã –ø–æ —Å–Ω—É", callback_data="sleep_tips")
        ],
        [
            InlineKeyboardButton("üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏", callback_data="user_data_management"),
            InlineKeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–º–µ—Ä–∞", callback_data="request_contact")
        ]
    ])
    await client.send_message(
        chat_id=chat_id,
        text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.',
        reply_markup=ReplyKeyboardRemove()
    )
    await client.send_message(
        chat_id=chat_id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )


async def show_reminders_menu(client: Client, message: Message, user: User = None):
    if user is None:
        user = message.from_user
    try:
        is_valid_user(user)
    except Exception as e:
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º: {e}")
    user_id = user.id

    try:
        reminders_record = execute_query("SELECT reminder_time FROM reminders WHERE user_id = :user_id",
                                         {'user_id': user_id}).fetchone()
        if reminders_record:
            reminder_time = reminders_record['reminder_time']
            text = f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {reminder_time}."
            keyboard = InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data="set_reminder"),
                    InlineKeyboardButton("üîï –£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data="reset_reminder")
                ],
                [
                    InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="back_to_menu")
                ]
            ])
        else:
            text = "–£ –≤–∞—Å –Ω–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."
            keyboard = InlineKeyboardMarkup([ 
                [
                    InlineKeyboardButton("‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data="set_reminder"),
                ],
                [
                    InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="back_to_menu")
                ]
            ])
        await message.reply_text(text, reply_markup=ReplyKeyboardRemove())
        await client.send_message(
            chat_id=user_id,
            text="–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f'–ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')
        await message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥")


async def show_sleep_characteristics_menu(client: Client, user_id: int):
    keyboard = InlineKeyboardMarkup(
        [
            [InlineKeyboardButton("üòä –í–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ", callback_data="rate_mood")],
            [InlineKeyboardButton("üõå –û—Ü–µ–Ω–∫–∞ —Å–Ω–∞", callback_data="rate_sleep")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ]
    )
    await client.send_message(
        chat_id=user_id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É —Å–Ω–∞:",
        reply_markup=keyboard
    )


async def show_user_data_management_menu(client: Client, user_id: int):
    keyboard = InlineKeyboardMarkup(
        [
            [InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö", callback_data="save_data")],
            [InlineKeyboardButton("üóë –£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö", callback_data="delete_data")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ]
    )
    await client.send_message(
        chat_id=user_id,
        text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        reply_markup=keyboard
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
@app.on_callback_query()
async def handle_callback_query(client: Client, callback_query: CallbackQuery):
    user = callback_query.from_user
    try:
        is_valid_user(user)
    except Exception as e:
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º: {e}")
    data = callback_query.data
    if data == "sleep":
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é sleep_time
        await sleep_time(client, callback_query.message, user)
    elif data == "wake":
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é wake_time
        await wake_time(client, callback_query.message, user)
    elif data == "stats":
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é sleep_stats
        await sleep_stats(client, callback_query.message, user)
    elif data == "reminders":
        await show_reminders_menu(client, callback_query.message, user)
    elif data == "set_reminder":
        await set_reminder(client, callback_query.message, user)
    elif data == "reset_reminder":
        await remove_reminder(client, callback_query.message, user)
    elif data == "request_contact":
        await request_contact(client, callback_query.message)
    elif data == "sleep_chart":
        await sleep_chart(client, callback_query.message, user)
    elif data == "sleep_goals":
        await set_sleep_goal(client, callback_query.message, user)
    elif data == "sleep_characteristics":
        await show_sleep_characteristics_menu(client, user.id)
    elif data == "sleep_tips":
        await sleep_tips(client, callback_query.message, user)
    elif data == "user_data_management":
        await show_user_data_management_menu(client, user.id)
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é
    elif data == "rate_mood":
        await log_mood(client, callback_query.message, user)
    elif data == "rate_sleep":
        await rate_sleep(client, callback_query.message, user)
    elif data == "delete_data":
        await delete_my_data(client, callback_query.message, user)
    elif data == "save_data":
        await export_data(client, callback_query.message, user)
    elif data == "back_to_menu":
        await callback_query.message.reply_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å.",
                                                reply_markup=get_initial_keyboard())
        await send_main_menu(client, callback_query.message.chat.id)
    # –£–≤–µ–¥–æ–º–ª—è–µ–º Telegram, —á—Ç–æ –∫–æ–ª–±—ç–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
    await callback_query.message.edit_reply_markup(reply_markup=None)
    await callback_query.answer()


@app.on_inline_query()
async def answer_inline_query(client, inline_query):
    user = inline_query.from_user
    try:
        is_valid_user(user)
    except Exception as e:
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º: {e}")
    user_id = user.id
    query = inline_query.query.strip()
    if query == "stats":
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        stats = get_user_stats(user_id)
        if stats:
            result = [
                InlineQueryResultArticle(
                    id=str(uuid4()),
                    title="–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–Ω–∞",
                    input_message_content=InputTextMessageContent(stats),
                    description="–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–Ω–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ–Ω"
                )
            ]
            inline_query.answer(result)
        else:
            inline_query.answer([])
    else:
        inline_query.answer([])

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª Inline-query –∑–∞–ø—Ä–æ—Å: {query}")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
@app.on_message(filters.text & ~filters.regex(r'^/'))
async def handle_button_presses(client, message: Message):
    user = message.from_user
    try:
        is_valid_user(user)
    except Exception as e:
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º: {e}")
    user_id = user.id
    text = message.text.strip()
    if text == "‚öôÔ∏è –ú–µ–Ω—é":
        await send_main_menu(client, message.chat.id)
    # elif text == "üò¥ –°–æ–Ω":
    #     sleep_time(client, message, user)
    # elif text == "üåÖ –ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ":
    #     wake_time(client, message, user)
    # elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
    #     sleep_stats(client, message, user)
    # elif text == "‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ":
    #     set_reminder(client, message)
    # elif text == "üîï –£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ":
    #     remove_reminder(client, message, user)
    # elif text == "üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞":
    #     request_contact(client, message)
    # elif text == "üìà –ì—Ä–∞—Ñ–∏–∫ —Å–Ω–∞":
    #     sleep_chart(client, message, user)
    # elif text == "üí° –°–æ–≤–µ—Ç –ø–æ —Å–Ω—É":
    #     sleep_tips(client, message, user)
    # elif text == "‚≠êÔ∏è –û—Ü–µ–Ω–∫–∞ —Å–Ω–∞":
    #     rate_sleep(client, message)
    # elif text == "üéØ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–∏ —Å–Ω–∞":
    #     set_sleep_goal(client, message)
    # elif text == "ü•≥ –í–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ":
    #     log_mood(client, message)
    # elif text == "üóÉ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ":
    #     export_data(client, message, user)
    elif text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
        await message.reply_text("–≠—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ.")
    elif text in {"‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è", "üîô –ù–∞–∑–∞–¥", "‚Üê –ù–∞–∑–∞–¥"}:
        await message.reply_text(
            "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_initial_keyboard()
        )
    else:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ ForceReply, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º
        if message.reply_to_message:

            if user_id not in user_states:
                await message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è –Ω–∞—á–∞–ª–∞.",
                                         reply_markup=get_back_keyboard())
                await send_main_menu(client, user_id)
                return

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä, set_reminder, save_reminder_time –∏ —Ç.–¥.
            if user_id in user_states and user_states[user.id] != UserStates.STATE_NONE:
                await message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å.", reply_markup=ForceReply())

                state = user_states[user_id]

                await user_state_navigate(state, client, message, user)
        else:
            if user.id in user_states and user_states[user.id] != UserStates.STATE_NONE:

                state = user_states[user_id]

                await user_state_navigate(state, client, message, user)

                # message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å.", reply_markup=ForceReply())
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
            else:
                await message.reply_text(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.",
                    reply_markup=get_initial_keyboard()
                )
    if text in {"üò¥ –°–æ–Ω", "üåÖ –ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                "‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", "üîï –£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ",
                "üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", "üìà –ì—Ä–∞—Ñ–∏–∫ —Å–Ω–∞", "üí° –°–æ–≤–µ—Ç –ø–æ —Å–Ω—É",
                "‚≠êÔ∏è –û—Ü–µ–Ω–∫–∞ —Å–Ω–∞", "üéØ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–∏ —Å–Ω–∞", "ü•≥ –í–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ",
                "üóÉ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", "‚ùå –£–¥–∞–ª–∏—Ç—å –º–æ–∏ –¥–∞–Ω–Ω—ã–µ", "‚öôÔ∏è –ú–µ–Ω—é", "‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è", "üîô –ù–∞–∑–∞–¥"}:
        await message.delete()

# –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ ForceReply
@app.on_message(filters.reply & filters.text)
async def handle_force_reply(client, message: Message):
    user = message.from_user
    try:
        is_valid_user(user)
    except Exception as e:
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º: {e}")
    user_id = user.id
    if user_id not in user_states:
        await message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è –Ω–∞—á–∞–ª–∞.",
                                 reply_markup=get_back_keyboard())
        await send_main_menu(client, user_id)
        return

    state = user_states[user_id]

    await user_state_navigate(state, client, message, user)


@app.on_message(filters.regex(r'^/'), group=1)
async def handle_command_text(client: Client, message: Message):
    await message.delete()


async def daily_weather_reminder():
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö –≥–æ—Ä–æ–¥–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        users = execute_query("SELECT id, city_name FROM users").fetchall()

        for user in users:
            user_id, city = user
            weather = get_weather(city)
            if weather:
                advice = get_sleep_advice_based_on_weather(weather)
                response = (
                    f"–ü–æ–≥–æ–¥–∞ –≤ {weather['city']}:\n"
                    f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather['temperature']}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {weather['feels_like']}¬∞C)\n"
                    f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather['humidity']}%\n"
                    f"–ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è: {weather['weather_description']}\n"
                    f"–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {weather['wind_speed']} –º/—Å\n\n"
                    f"–°–æ–≤–µ—Ç—ã –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Å–Ω–∞:\n{advice}"
                )
                try:
                    await app.send_message(chat_id=user_id, text=response)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ daily_weather_reminder: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç—Ö–æ–¥–∞ –∫–æ —Å–Ω—É
def calculate_bedtime(user_id):
    user = execute_query(
        'SELECT sleep_goal FROM users WHERE id = :user_id',
        {'user_id': user_id}).fetchone()
    reminder = execute_query(
        'SELECT reminder_time FROM reminders WHERE user_id = :user_id',
        {'user_id': user_id}).fetchone()
    if user and user['sleep_goal'] and reminder and reminder['reminder_time']:
        sleep_goal = user['sleep_goal']
        reminder_time = datetime.strptime(reminder['reminder_time'], "%H:%M").time()
        # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –≤—Å—Ç–∞–≤–∞—Ç—å –≤ reminder_time
        wake_up_time = datetime.combine(datetime.now(), reminder_time)
        bedtime = wake_up_time - timedelta(hours=sleep_goal)
        return bedtime.time()
    else:
        return None


# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
async def send_sleep_reminder():
    try:
        users = execute_query('SELECT user_id FROM reminders').fetchall()
        now = datetime.now()
        current_time = now.time()
        for user in users:
            user_id = user['user_id']
            sleep_record_count = execute_query('''
                        SELECT sleep_time FROM sleep_records 
                        WHERE user_id = :user_id AND sleep_time IS NOT NULL AND wake_time IS NULL
                    ''', {'user_id': user_id}).rowcount
            bedtime = calculate_bedtime(user_id)
            if (bedtime and current_time.hour == bedtime.hour
                    and current_time.minute == bedtime.minute
                    and not sleep_record_count):
                try:
                    await app.send_message(chat_id=user_id,
                                           text="üåô –ü–æ—Ä–∞ –ª–æ–∂–∏—Ç—å—Å—è —Å–ø–∞—Ç—å, —á—Ç–æ–±—ã –¥–æ—Å—Ç–∏—á—å –≤–∞—à–µ–π —Ü–µ–ª–∏ "
                                                "–ø–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è!")
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–ª–∏ —Å–Ω–∞")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ send_sleep_reminder: {e}")


def calculate_wake_up_time(user_id):
    user = execute_query('SELECT sleep_goal FROM users WHERE id = :user_id',
                         {'user_id': user_id}).fetchone()
    sleep_record = execute_query('''
        SELECT sleep_time FROM sleep_records 
        WHERE user_id = :user_id AND wake_time IS NULL
        ''', {'user_id': user_id}).fetchone()
    if user and user['sleep_goal'] and sleep_record and sleep_record['sleep_time']:
        sleep_goal = user['sleep_goal']
        sleep_time_str = sleep_record['sleep_time']
        sleep_time = datetime.strptime(sleep_time_str[:-10], "%Y-%m-%dT%H:%M")
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ–º –≤ datetime –∏ –ø–ª—é—Å—É–µ–º –∂–µ–ª–∞–µ–º—É—é —Ü–µ–ª—å —Å–Ω–∞
        sleep_datetime = datetime.combine(sleep_time, sleep_time.time())
        wake_up_time = sleep_datetime + timedelta(hours=sleep_goal)
        return wake_up_time.time()
    else:
        return None


async def send_wake_up_reminder():
    try:
        users = execute_query('SELECT user_id FROM reminders').fetchall()
        now = datetime.now()
        current_time = now.time()
        for user in users:
            user_id = user['user_id']
            wake_up_time = calculate_wake_up_time(user_id)
            if (wake_up_time and current_time.hour == wake_up_time.hour
                    and current_time.minute == wake_up_time.minute):
                try:
                    await app.send_message(chat_id=user_id,
                                           text="‚òÄÔ∏è –ü–æ—Ä–∞ –≤—Å—Ç–∞–≤–∞—Ç—å, —á—Ç–æ–±—ã –¥–æ—Å—Ç–∏—á—å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π!")
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–ª–∏ —Å–Ω–∞")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ send_wake_up_reminder: {e}")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@app.on_message()
def handle_messages(client, message: Message):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {message.text}")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    scheduler = AsyncIOScheduler()
    scheduler.add_job(send_sleep_reminder, CronTrigger(minute='*'))
    scheduler.add_job(send_wake_up_reminder,  CronTrigger(minute='*'))
    scheduler.add_job(daily_weather_reminder,  CronTrigger(hour=14, minute=4))
    scheduler.start()
    logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
    try:
        logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        app.run()
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

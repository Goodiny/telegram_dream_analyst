import logging
from datetime import datetime, timedelta

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from pyrogram import Client

from db.modify_tables import execute_query, get_all_reminders
from utils.wether_tips import get_weather, get_sleep_advice_based_on_weather

logger = logging.getLogger()


def setup_scheduler(app: Client):
    async def send_sleep_reminder():
        try:
            users = get_all_reminders()
            now = datetime.now()
            current_time = now.time()
            for user in users:
                user_id = user['user_id']
                sleep_record_count = execute_query('''
                            SELECT sleep_time FROM sleep_records 
                            WHERE user_id = :user_id AND sleep_time IS NOT NULL AND wake_time IS NULL
                        ''', {'user_id': user_id}).rowcount
                bedtime = calculate_bedtime(user_id)
                if (bedtime and current_time.hour == bedtime.hour
                        and current_time.minute == bedtime.minute
                        and not sleep_record_count):
                    try:
                        await app.send_message(chat_id=user_id,
                                               text="üåô –ü–æ—Ä–∞ –ª–æ–∂–∏—Ç—å—Å—è —Å–ø–∞—Ç—å, —á—Ç–æ–±—ã –¥–æ—Å—Ç–∏—á—å –≤–∞—à–µ–π —Ü–µ–ª–∏ "
                                                    "–ø–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è!")
                        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–ª–∏ —Å–Ω–∞")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ send_sleep_reminder: {e}")

    async def send_wake_up_reminder():
        try:
            users = execute_query('SELECT user_id FROM reminders').fetchall()
            now = datetime.now()
            current_time = now.time()
            for user in users:
                user_id = user['user_id']
                wake_up_time = calculate_wake_up_time(user_id)
                if (wake_up_time and current_time.hour == wake_up_time.hour
                        and current_time.minute == wake_up_time.minute):
                    try:
                        await app.send_message(chat_id=user_id,
                                               text="‚òÄÔ∏è –ü–æ—Ä–∞ –≤—Å—Ç–∞–≤–∞—Ç—å, —á—Ç–æ–±—ã –¥–æ—Å—Ç–∏—á—å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π!")
                        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–ª–∏ —Å–Ω–∞")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ send_wake_up_reminder: {e}")

    async def daily_weather_reminder():
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö –≥–æ—Ä–æ–¥–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            users = execute_query("SELECT id, city_name FROM users").fetchall()

            for user in users:
                user_id, city = user
                weather = get_weather(city)
                if weather:
                    advice = get_sleep_advice_based_on_weather(weather)
                    response = (
                        f"–ü–æ–≥–æ–¥–∞ –≤ {weather['city']}:\n"
                        f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather['temperature']}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {weather['feels_like']}¬∞C)\n"
                        f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather['humidity']}%\n"
                        f"–ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è: {weather['weather_description']}\n"
                        f"–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {weather['wind_speed']} –º/—Å\n\n"
                        f"–°–æ–≤–µ—Ç—ã –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Å–Ω–∞:\n{advice}"
                    )
                    try:
                        await app.send_message(chat_id=user_id, text=response)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ daily_weather_reminder: {e}")

    scheduler = AsyncIOScheduler()
    scheduler.add_job(send_sleep_reminder, CronTrigger(minute='*'))
    scheduler.add_job(send_wake_up_reminder, CronTrigger(minute='*'))
    scheduler.add_job(daily_weather_reminder, CronTrigger(hour=14, minute=4))
    scheduler.start()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç—Ö–æ–¥–∞ –∫–æ —Å–Ω—É
def calculate_bedtime(user_id):
    user = execute_query(
        'SELECT sleep_goal FROM users WHERE id = :user_id',
        {'user_id': user_id}).fetchone()
    reminder = execute_query(
        'SELECT reminder_time FROM reminders WHERE user_id = :user_id',
        {'user_id': user_id}).fetchone()
    if user and user['sleep_goal'] and reminder and reminder['reminder_time']:
        sleep_goal = user['sleep_goal']
        reminder_time = datetime.strptime(reminder['reminder_time'], "%H:%M").time()
        # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –≤—Å—Ç–∞–≤–∞—Ç—å –≤ reminder_time
        wake_up_time = datetime.combine(datetime.now(), reminder_time)
        bedtime = wake_up_time - timedelta(hours=sleep_goal)
        return bedtime.time()
    else:
        return None


def calculate_wake_up_time(user_id):
    user = execute_query('SELECT sleep_goal FROM users WHERE id = :user_id',
                         {'user_id': user_id}).fetchone()
    sleep_record = execute_query('''
        SELECT sleep_time FROM sleep_records 
        WHERE user_id = :user_id AND wake_time IS NULL
        ''', {'user_id': user_id}).fetchone()
    if user and user['sleep_goal'] and sleep_record and sleep_record['sleep_time']:
        sleep_goal = user['sleep_goal']
        sleep_time_str = sleep_record['sleep_time']
        sleep_time = datetime.strptime(sleep_time_str[:-10], "%Y-%m-%dT%H:%M")
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ–º –≤ datetime –∏ –ø–ª—é—Å—É–µ–º –∂–µ–ª–∞–µ–º—É—é —Ü–µ–ª—å —Å–Ω–∞
        sleep_datetime = datetime.combine(sleep_time, sleep_time.time())
        wake_up_time = sleep_datetime + timedelta(hours=sleep_goal)
        return wake_up_time.time()
    else:
        return None


if __name__ == "__main__":
    pass

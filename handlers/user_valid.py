from __future__ import annotations

from datetime import datetime
import logging.config
import re

from pyrogram import Client
from pyrogram.types import User, Message, ForceReply

from db.db import get_has_provided_location, get_sleep_record_last_db, get_user_db, save_user_to_db
from handlers.keyboards import get_back_keyboard, get_request_keyboard
from handlers.states import UserStates, user_states


logger = logging.getLogger(__name__)


def is_valid_user(user: User):
    if not isinstance(user, User):
        raise TypeError
    if (
            user.is_bot or user.is_fake or
            user.is_deleted or user.is_contact or
            user.is_restricted or user.is_scam
        ):
        raise ValueError
    return True


def get_user_stats(user_id: int):
    try:
        record = get_sleep_record_last_db(user_id)
        if record:
            # sleep_time = record['sleep_time']
            sleep_time = datetime.fromisoformat(record['sleep_time'])
            wake_time = record['wake_time']
            if wake_time:
                wake_time = datetime.fromisoformat(wake_time)
                duration = wake_time - sleep_time
                response = (f"üõå –í–∞—à–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å —Å–Ω–∞:\n–° {sleep_time.strftime('%Y-%m-%d %H:%M')} –¥–æ "
                            f"{wake_time.strftime('%Y-%m-%d %H:%M')} ‚Äî {duration}")
            else:
                response = f"üõå –í–∞—à–∞ —Ç–µ–∫—É—â–∞—è –∑–∞–ø–∏—Å—å —Å–Ω–∞:\n–° {sleep_time.strftime('%Y-%m-%d %H:%M')} ‚Äî –ï—â—ë –Ω–µ –ø—Ä–æ—Å–Ω—É–ª–∏—Å—å"
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–Ω–∞")
            return response
        else:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–Ω–∞, –Ω–æ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π")
            return
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return


def add_new_user(user: User):
    if user is None:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    try:
        is_valid_user(user)
    except Exception as e:
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º: {e}")
        return

    user_id = user.id
    username = user.username
    first_name = user.first_name
    last_name = user.last_name

    try:
        user_db = get_user_db(user_id)
        if user_db is not None:
            return  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user_id}: {e}")

    try:
        # –í—Å—Ç–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ —Ç–∞–±–ª–∏—Ü—É users
        save_user_to_db(user_id, username, first_name, last_name)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ users")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")


async def user_valid(
        message: Message | None,
        user: User,
        text: str = "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–∞–ª–∏–¥–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, "
                    "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞–ª–∏–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param message: Message
    :param user: User
    :param text: str
    :return:
    """
    if user is None:
        user = message.from_user
    try:
        is_valid_user(user)
    except Exception as e:
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º: {e}")
        msg = await message.reply_text(
            text,
            reply_markup=get_back_keyboard())
        return 'False', msg.id

    return 'True', user.id


def requires_location(func):
    async def wrapper(client: Client, message: Message, user: User = None):
        is_user, valid_id = await user_valid(message, user)
        if is_user == 'False':
            return valid_id

        user_id = valid_id
        try:
            result = get_has_provided_location(user_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏ get_has_provided_location –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            msg = await message.reply_text(
                "–î–∞–Ω–Ω—ã–µ –æ —Ä–∞—Å–∫—Ä—ã—Ç–∏–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –Ω–µ –±—ã–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
                reply_markup=get_request_keyboard('location')
            )
            return msg.id

        if result is None:
            try:
                add_new_user(user)
            except Exception as e:
                msg = await message.reply_text(
                    "–î–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å –¥—Ä—É–≥–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º",
                    reply_markup=get_request_keyboard('back')
                )
                return msg.id
            result = {'has_provided_location': 0}

        has_provided_location = result['has_provided_location']
        if not has_provided_location:
            try:
                msg = await message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, –ø—Ä–µ–∂–¥–µ —á–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
                                               reply_markup=get_request_keyboard('location'))
                return msg.id
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –º–µ—Ç–æ–¥–∞ message_reply –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                msg = await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, –ø—Ä–µ–∂–¥–µ —á–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
                                          reply_markup=get_request_keyboard('location'))
                return msg.id
        return await func(client, message, user)
    return wrapper


async def valid_time_format(message: Message, user: User):
    """

    :param message: Message
    :param user: User
    :return:
    """
    is_user, valid_id = await user_valid(message, user)
    if is_user == 'False':
        return False, valid_id

    add_new_user(user)
    user_id = valid_id
    _time_str = message.text.strip()
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
    if not re.match(r'^\d{1,2}:\d{2}$', _time_str):
        msg = await message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM.",
            reply_markup=ForceReply()
        )
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: {_time_str}")
        return False, msg.id
    return True, (_time_str, user_id)


async def user_state_navigate(state: UserStates, client: Client, message: Message, user: User = None):
    """

    :param state: UserStates
    :param client: Client
    :param message: Message
    :param user: user
    :return:
    """
    from handlers.data_management import confirm_delete
    from handlers.reminders import save_reminder_time
    from handlers.sleep_character.sleep_mood import save_mood
    from handlers.sleep_character.sleep_quality import save_sleep_quality
    from handlers.sleep_character.user_sleep_goal import save_sleep_goal
    from handlers.sleep_character.user_wake_time import save_wake_time
    
    if user is None:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    try:
        is_valid_user(user)
    except Exception as e:
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º: {e}")
        return

    user_id = user.id

    if state == UserStates.STATE_WAITING_REMINDER_TIME:
        message_id = await save_reminder_time(client, message, user)
    elif state == UserStates.STATE_WAITING_SLEEP_QUALITY:
        message_id = await save_sleep_quality(client, message, user)
    elif state == UserStates.STATE_WAITING_SLEEP_GOAL:
        message_id = await save_sleep_goal(client, message, user)
    elif state == UserStates.STATE_WAITING_USER_WAKE_TIME:
        message_id = await save_wake_time(client, message, user)
    elif state == UserStates.STATE_WAITING_SAVE_MOOD:
        message_id = await save_mood(client, message, user)
    elif state == UserStates.STATE_WAITING_CONFIRM_DELETE:
        message_id = await confirm_delete(client, message, user)
    else:
        message_id = await message.reply_text(
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=get_back_keyboard())
        user_states[user_id] = UserStates.STATE_NONE
    await message.delete()

    return message_id


if __name__ == "__main__":
    pass

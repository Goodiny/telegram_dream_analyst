from __future__ import annotations

import io
import logging
import random

from datetime import datetime
from uuid import uuid4

from matplotlib import pyplot as plt
from pyrogram import Client, filters
from pyrogram.types import Message, User, ForceReply, CallbackQuery, \
    InputTextMessageContent, InlineQueryResultArticle, \
    ReplyKeyboardRemove


from handlers.requests import save_contact, request_location, save_location, request_contact
from handlers.sleep_character.sleep_character import show_sleep_characteristics_menu
from handlers.sleep_character.sleep_quality import rate_sleep
from handlers.sleep_character.user_sleep_goal import set_sleep_goal
from handlers.sleep_character.user_wake_time import set_wake_time
from handlers.weather_advice import get_weather_advice
from handlers.data_management import delete_my_data, export_data, show_user_data_management_menu
from handlers.keyboards import (
    get_initial_keyboard, get_back_keyboard, main_menu_keyboard, get_request_keyboard
)

from handlers.reminders import set_reminder, remove_reminder, show_reminders_menu

from handlers.sleep_character.sleep_mood import log_mood
from handlers.states import UserStates, user_states
from handlers.user_valid import add_new_user, get_user_stats, is_valid_user, user_state_navigate

from db import (
    get_has_provided_location, get_sleep_records_per_week,
    save_wake_time_records_db, save_sleep_time_records_db, get_wake_time_null
)


logger = logging.getLogger(__name__)


def setup_handlers(app: Client):
    """

    :param app: Client
    :return:
    """
    message_ids: list[int] = []

    @app.on_message(filters.command("start"))
    async def start(client: Client, message: Message):
        user = message.from_user
        result = None
        try:
            add_new_user(user)
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            result = get_has_provided_location(user.id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")
        finally:
            if result is None or not result['has_provided_location']:
                await message.reply_text(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.",
                    reply_markup=get_request_keyboard('location_only'))
            else:
                await message.reply_text(
                    "–í—ã —É–∂–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏ —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é.\n\nüëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–Ω–∞.\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
                    reply_markup=get_initial_keyboard()
                )

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
    @app.on_message(filters.text & ~filters.regex(r'^/'))
    async def handle_button_presses(client: Client, message: Message):
        user = message.from_user
        try:
            is_valid_user(user)
        except Exception as e:
            logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º: {e}")
            return

        user_id = user.id
        text = message.text.strip()
        if text == "‚öôÔ∏è –ú–µ–Ω—é":
            await send_main_menu(client, message.chat.id)
        # elif text == "üò¥ –°–æ–Ω":
        #     sleep_time(client, message, user)
        # elif text == "üåÖ –ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ":
        #     wake_time(client, message, user)
        # elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        #     sleep_stats(client, message, user)
        # elif text == "‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ":
        #     set_reminder(client, message)
        # elif text == "üîï –£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ":
        #     remove_reminder(client, message, user)
        # elif text == "üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞":
        #     request_contact(client, message)
        # elif text == "üìà –ì—Ä–∞—Ñ–∏–∫ —Å–Ω–∞":
        #     sleep_chart(client, message, user)
        # elif text == "üí° –°–æ–≤–µ—Ç –ø–æ —Å–Ω—É":
        #     sleep_tips(client, message, user)
        # elif text == "‚≠êÔ∏è –û—Ü–µ–Ω–∫–∞ —Å–Ω–∞":
        #     rate_sleep(client, message)
        # elif text == "üéØ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–∏ —Å–Ω–∞":
        #     set_sleep_goal(client, message)
        # elif text == "ü•≥ –í–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ":
        #     log_mood(client, message)
        # elif text == "üóÉ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ":
        #     export_data(client, message, user)
        elif text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
            await message.reply_text("–≠—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ.")
        elif text in {"‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è", "üîô –ù–∞–∑–∞–¥", "‚Üê –ù–∞–∑–∞–¥"}:
            if message_ids:
                await client.delete_messages(message.chat.id, message_ids)
            await remove_main_menu(client, message.chat.id)
            await message.reply_text(
                "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=main_menu_keyboard()
            )
        else:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ ForceReply, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º
            if message.reply_to_message:

                logger.debug("ForceReply on button presses")

                if user_id not in user_states or user_states[user.id] == UserStates.STATE_NONE:

                    await send_main_menu(client, user_id)
                    # await message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è –Ω–∞—á–∞–ª–∞.",
                    #                          reply_markup=main_menu_keyboard())
                    await message.delete()

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä, set_reminder, save_reminder_time –∏ —Ç.–¥.
                elif user_id in user_states and user_states[user.id] != UserStates.STATE_NONE:
                    state = user_states[user_id]

                    await user_state_navigate(state, client, message, user)
            else:
                if user.id in user_states and user_states[user.id] != UserStates.STATE_NONE:

                    state = user_states[user_id]

                    await user_state_navigate(state, client, message, user)

                # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
                else:
                    await message.reply_text(
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.",
                        reply_markup=get_initial_keyboard()
                    )
        if text in {"üò¥ –°–æ–Ω", "üåÖ –ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                    "‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", "üîï –£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ",
                    "üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", "üìà –ì—Ä–∞—Ñ–∏–∫ —Å–Ω–∞", "üí° –°–æ–≤–µ—Ç –ø–æ —Å–Ω—É",
                    "‚≠êÔ∏è –û—Ü–µ–Ω–∫–∞ —Å–Ω–∞", "üéØ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–∏ —Å–Ω–∞", "ü•≥ –í–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ",
                    "üóÉ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", "‚ùå –£–¥–∞–ª–∏—Ç—å –º–æ–∏ –¥–∞–Ω–Ω—ã–µ", "‚öôÔ∏è –ú–µ–Ω—é", "‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è", "üîô –ù–∞–∑–∞–¥"}:
            await message.delete()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
    @app.on_callback_query()
    async def handle_callback_query(client: Client, callback_query: CallbackQuery):
        user = callback_query.from_user
        try:
            is_valid_user(user)
        except Exception as e:
            logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º: {e}")
            return

        message = callback_query.message
        data = callback_query.data

        await message.delete()

        if data == "sleep":
            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é sleep_time
            await sleep_time(client, message, user)
        elif data == "wake":
            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é wake_time
            await wake_time(client, message, user)
        elif data == "stats":
            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é sleep_stats
            await sleep_stats(client, message, user)
        elif data == "reminders":
            message_ids.append(await show_reminders_menu(client, message, user))
        elif data == "set_reminder":
            message_ids.append(await set_reminder(client, message, user))
        elif data == "reset_reminder":
            message_ids.append(await remove_reminder(client, message, user))
        elif data == "request_contact":
            await request_contact(client, message)
        elif data == "sleep_chart":
            await sleep_chart(client, message, user)
        elif data == "sleep_goals":
            await set_sleep_goal(client, message, user)
        elif data == "sleep_characteristics":
            await show_sleep_characteristics_menu(client, user.id)
        elif data == "sleep_tips":
            await sleep_tips(client, message, user)
        elif data == "user_data_management":
            await show_user_data_management_menu(client, user.id)
        elif data == "rate_mood":
            await log_mood(client, message, user)
        elif data == "set_wake_time":
            await set_wake_time(client, message, user)
        elif data == "weather":
            await get_weather_advice(client, message, user)
        elif data == "rate_sleep":
            await rate_sleep(client, message, user)
        elif data == "delete_data":
            await delete_my_data(client, message, user)
        elif data == "save_data":
            await export_data(client, message, user)
        elif data == "back_to_menu":
            if message_ids:
                await client.delete_messages(message.chat.id, message_ids)

            await message.reply("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å.", reply_markup=main_menu_keyboard())

            # await send_main_menu(client, message.chat.id)
        # –£–≤–µ–¥–æ–º–ª—è–µ–º Telegram, —á—Ç–æ –∫–æ–ª–±—ç–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
        await message.edit_reply_markup(reply_markup=None)
        await callback_query.answer()

    @app.on_inline_query()
    async def answer_inline_query(client, inline_query):
        user = inline_query.from_user
        try:
            is_valid_user(user)
        except Exception as e:
            logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º: {e}")
            return

        user_id = user.id
        query = inline_query.query.strip()
        if query == "stats":
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            stats = get_user_stats(user_id)
            if stats:
                result = [
                    InlineQueryResultArticle(
                        id=str(uuid4()),
                        title="–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–Ω–∞",
                        input_message_content=InputTextMessageContent(stats),
                        description="–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–Ω–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ–Ω"
                    )
                ]
                inline_query.answer(result)
            else:
                inline_query.answer([])
        else:
            inline_query.answer([])

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª Inline-query –∑–∞–ø—Ä–æ—Å: {query}")

    # –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ ForceReply
    @app.on_message(filters.reply & filters.text)
    async def handle_force_reply(client, message: Message):
        user = message.from_user
        try:
            is_valid_user(user)
        except Exception as e:
            logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º: {e}")
            return

        logger.debug("Handle_Force_Reply")
        user_id = user.id
        if user_id not in user_states:
            await message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è –Ω–∞—á–∞–ª–∞.",
                                     reply_markup=get_back_keyboard())
            await send_main_menu(client, user_id)
            return

        logger.debug("user_id in user_states")
        state = user_states[user_id]

        await user_state_navigate(state, client, message, user)

    # –ö–æ–º–∞–Ω–¥–∞ /sleep
    @app.on_message(filters.command("sleep"))
    async def sleep_handler(client: Client, message: Message, user: User = None):
        await sleep_time(client, message, user)

    # –ö–æ–º–∞–Ω–¥–∞ /wake
    @app.on_message(filters.command("wake"))
    async def wake_time_handler(client: Client, message: Message, user: User = None):
        await wake_time(client, message, user)

    # –ö–æ–º–∞–Ω–¥–∞ /stats
    @app.on_message(filters.command("stats"))
    async def sleep_stats_handle(client: Client, message: Message, user: User = None):
        await sleep_stats(client, message, user)

    # –ö–æ–º–∞–Ω–¥–∞ /remove_reminder
    @app.on_message(filters.command("remove_reminder"))
    async def remove_reminder_handler(client: Client, message: Message, user: User = None):
        await remove_reminder(client, message, user)

    # –ö–æ–º–∞–Ω–¥–∞ /log_mood
    @app.on_message(filters.command("log_mood"))
    async def log_mood_handler(client: Client, message: Message, user: User = None):
        await log_mood(client, message, user)

    # –ö–æ–º–∞–Ω–¥–∞ /set_sleep_goal
    @app.on_message(filters.command("set_sleep_goal"))
    async def set_sleep_goal_handler(client: Client, message: Message, user: User = None):
        await set_sleep_goal(client, message, user)

    # –ö–æ–º–∞–Ω–¥–∞ /rate_sleep
    @app.on_message(filters.command("rate_sleep"))
    async def rate_sleep_handler(client: Client, message: Message, user: User = None):
        await rate_sleep(client, message, user)

    @app.on_message(filters.command("set_wake_time"))
    async def set_wake_time_handler(client: Client, message: Message, user: User = None):
        await set_wake_time(client, message, user)

    # –ö–æ–º–∞–Ω–¥–∞ /set_reminder
    @app.on_message(filters.command("set_reminder"))
    async def set_reminder_handler(client: Client, message: Message, user: User = None):
        await set_reminder(client, message, user)

    # –ö–æ–º–∞–Ω–¥–∞ /get_phone
    @app.on_message(filters.command("get_phone"))
    async def get_phone_handler(client: Client, message: Message):
        await request_contact(client, message)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
    @app.on_message(filters.contact)
    async def save_contact_handler(client: Client, message: Message, user: User = None):
        await save_contact(client, message, user)

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ª–æ–∫–∞—Ü–∏–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    @app.on_message(filters.command("send_location"))
    async def send_location_handler(client: Client, message: Message, user: User = None):
        await request_location(client, message)

    @app.on_message(filters.location)
    async def handle_location(client: Client, message: Message):
        await save_location(client, message)

    @app.on_message(filters.command("weather_advice"))
    async def weather_advice_handler(client: Client, message: Message, user: User = None):
        await get_weather_advice(client, message, user)

    # –ö–æ–º–∞–Ω–¥–∞ /sleep_tips
    @app.on_message(filters.command("sleep_tips"))
    async def sleep_tips_handler(client: Client, message: Message, user: User = None):
        await sleep_tips(client, message, user)

    # –ö–æ–º–∞–Ω–¥–∞ /export_data
    @app.on_message(filters.command("export_data"))
    async def export_data_handler(client: Client, message: Message, user: User = None):
        await export_data(client, message, user)

    # –ö–æ–º–∞–Ω–¥–∞ /delete_my_data
    @app.on_message(filters.command("delete_my_data"))
    async def delete_my_data_handler(client: Client, message: Message, user: User = None):
        await delete_my_data(client, message, user)

    # –ö–æ–º–∞–Ω–¥–∞ /menu
    @app.on_message(filters.command("menu"))
    async def send_main_menu_handler(client: Client, chat_id: int):
        await send_main_menu(client, chat_id)

    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
    @app.on_message(filters.regex(r'^/'), group=1)
    async def handle_command_text(client: Client, message: Message):
        await message.delete()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    @app.on_message()
    def handle_messages(client, message: Message):
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {message.text}")


async def sleep_time(client: Client, message: Message, user: User = None):
    if user is None:
        user = message.from_user
    try:
        is_valid_user(user)
        add_new_user(user)
    except ValueError as e:
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º: {e}")
        return

    user_id = user.id
    sleep_time_dt = datetime.now()

    try:

        if len(get_wake_time_null(user_id)) > 0:
            await message.reply_text(
                "‚ùóÔ∏è –ó–∞–ø–∏—Å—å –æ –≤—Ä–µ–º–µ–Ω–∏ —Å–Ω–∞ —É–∂–µ –æ—Ç–º–µ—á–µ–Ω–∞. "
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /wake, –¥–ª—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è.",
                reply_markup=get_back_keyboard()
            )
            logger.warning(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–ø–∏—Å—å —Å–Ω–∞ –±–µ–∑ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è.")
            return

        save_sleep_time_records_db(user_id, sleep_time_dt.isoformat(sep=' '))
        await message.reply_text(
            f"üåô –í—Ä–µ–º—è –æ—Ç—Ö–æ–¥–∞ –∫–æ —Å–Ω—É –æ—Ç–º–µ—á–µ–Ω–æ: {sleep_time_dt.strftime('%Y-%m-%d %H:%M:%S')}",
            reply_markup=get_back_keyboard()
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ—Ç–∏–ª –≤—Ä–µ–º—è —Å–Ω–∞: {sleep_time_dt}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å–Ω–∞.",
            reply_markup=get_back_keyboard()
        )


async def wake_time(client: Client, message: Message, user: User = None):
    if user is None:
        user = message.from_user
    try:
        is_valid_user(user)
    except Exception as e:
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º: {e}")
        return

    user_id = user.id
    wake_time = datetime.now()

    try:

        if save_wake_time_records_db(user_id, wake_time.isoformat(sep=' ')).rowcount == 0:
            await message.reply_text(
                "‚ùóÔ∏è –ù–µ—Ç –∑–∞–ø–∏—Å–∏ –æ –≤—Ä–µ–º–µ–Ω–∏ —Å–Ω–∞ –∏–ª–∏ —É–∂–µ –æ—Ç–º–µ—á–µ–Ω–æ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ. "
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /sleep, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å.",
                reply_markup=get_back_keyboard()
            )
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –æ—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–ø–∏—Å–∏ —Å–Ω–∞.")
            return
        await message.reply_text(
            f"‚òÄÔ∏è –í—Ä–µ–º—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è –æ—Ç–º–µ—á–µ–Ω–æ: {wake_time.strftime('%Y-%m-%d %H:%M:%S')}",
            reply_markup=get_back_keyboard()
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ—Ç–∏–ª –≤—Ä–µ–º—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è: {wake_time}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è.",
            reply_markup=get_back_keyboard()
        )


async def sleep_stats(client: Client, message: Message, user: User = None):
    if user is None:
        user = message.from_user
    try:
        is_valid_user(user)
    except Exception as e:
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º: {e}")
        return

    user_id = user.id
    try:
        response = get_user_stats(user_id)
        if response:
            await message.reply_text(
                response,
                reply_markup=get_back_keyboard()
            )
        else:
            await message.reply_text(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ —Å–Ω–µ.",
                reply_markup=get_back_keyboard()
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏ get_user_stats: {e}")
        await message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–Ω–∞.",
            reply_markup=get_back_keyboard()
        )


async def sleep_chart(client: Client, message: Message, user: User = None):
        if user is None:
            user = message.from_user
        try:
            is_valid_user(user)
        except Exception as e:
            logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º: {e}")
            return

        user_id = user.id

        try:
            records = get_sleep_records_per_week(user_id)
            if records:
                durations = []
                dates = []
                for record in records:
                    sleep_time = datetime.fromisoformat(record['sleep_time'])
                    wake_time = datetime.fromisoformat(record['wake_time'])
                    duration = (wake_time - sleep_time).total_seconds() / 3600  # –í —á–∞—Å–∞—Ö
                    durations.append(duration)
                    dates.append(sleep_time.date())
                # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
                plt.figure(figsize=(10, 5))
                plt.plot(dates, durations, marker='o')
                plt.xlabel('–î–∞—Ç–∞')
                plt.ylabel('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞ (—á–∞—Å—ã)')
                plt.title('–í–∞—à —Å–æ–Ω –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π')
                plt.grid(True)
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –≤ –±—É—Ñ–µ—Ä
                buf = io.BytesIO()
                plt.savefig(buf, format='png')
                buf.seek(0)
                # –û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await client.send_photo(chat_id=user_id, photo=buf, caption='–í–∞—à –≥—Ä–∞—Ñ–∏–∫ —Å–Ω–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π.',
                                        reply_markup=get_back_keyboard())
                plt.close()
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –≥—Ä–∞—Ñ–∏–∫ —Å–Ω–∞")
            else:
                await message.reply_text(
                    "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.",
                    reply_markup=get_back_keyboard()
                )
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –≥—Ä–∞—Ñ–∏–∫ —Å–Ω–∞, –Ω–æ –∑–∞–ø–∏—Å–µ–π –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            await message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞.",
                reply_markup=get_back_keyboard()
            )


async def sleep_tips(client: Client, message: Message, user: User = None):
    if user is None:
        user = message.from_user
    try:
        is_valid_user(user)
    except Exception as e:
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º: {e}")
        return

    user_id = user.id

    tips = []
    with open("configs/sleep_tips.txt", 'r') as st:
        while line := st.readline():
            tips.append(line)

    tip = random.choice(tips)
    await message.reply_text(
        f"üí° –°–æ–≤–µ—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å–Ω–∞:\n\n{tip}",
        reply_markup=get_back_keyboard()
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–æ–≤–µ—Ç –ø–æ —Å–Ω—É")


async def remove_main_menu(client: Client, chat_id: int):
    sent_remove = await client.send_message(
        chat_id=chat_id,
        text="–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –º–µ–Ω—é.",
        reply_markup=ReplyKeyboardRemove()
    )
    await sent_remove.delete()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –≤—ã—à–µ–ª –∏–∑ –º–µ–Ω—é")


async def send_main_menu(client: Client, chat_id: int):
    await remove_main_menu(client, chat_id)
    await client.send_message(
        chat_id=chat_id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu_keyboard()
    )


if __name__ == "__main__":
    pass
